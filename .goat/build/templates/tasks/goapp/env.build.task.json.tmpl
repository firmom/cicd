{{- define "goapp.env_build_task_json" -}}

{{- $ctx := .ctx -}}
{{- $env := .env -}}
{{- $name := (index $ctx.Data (print $ctx.From ".name")) -}}
{{- $repoHost := (index $ctx.Data (print $ctx.From ".repo.host")) -}}
{{- $repo := (index $ctx.Data (print $ctx.From ".repo.path")) -}}
{{- $type := (index $ctx.Data (print $ctx.From ".type")) -}}
{{- $image := (index $ctx.Data (print $ctx.From ".docker.image")) -}}
{{- $test := (index $ctx.Data (print $ctx.From ".test")) -}}

{
  "name": "Build{{camelcaseuf $env}}{{$name}}",
  "entrypoint": true,
  "extends": ["Clone{{camelcaseuf $env}}{{$name}}"],
  "locks": ["/data/code/{{$repo}}-{{camelcaself $env}}"],
  "executor": "onlylast",
  "trigger": [
{{- if eq $env "prod" -}}
  {{- range $index, $key := (keys $ctx.Data (print $ctx.From ".trigger.")) -}}
    {{- $name := (index $ctx.Data (print $ctx.From ".trigger." $key ".name")) -}}
    {{- if ne $index 0 -}}, {{ end -}}
    "{{$name}}"
  {{- end -}}
{{- end -}}
],
  "script": {
    "cwd": "/data/code/{{$repo}}-{{camelcaself $env}}/src/{{$repoHost}}/{{$repo}}",
    "commands": [{
      "command": "rm",
      "args": ["-rf", "vendor"]
    }, {
      "command": "sh",
      "args": ["-x", "/app/config/helpers/golang/dep-ensure.sh", "{{$repoHost}}", "{{$repo}}", "{{lower $env}}"]
    }
{{- if ne $test "" -}}
    , {
      "command": "sh",
      "args": ["-x", "/app/config/helpers/golang/test.sh", "{{$repoHost}}", "{{$repo}}", "{{lower $env}}", "{{$test}}"]
    }
{{- end -}}
    ]
  }
}

{{- end -}}
